#include<iostream>
#include<string>
#include<queue>
#include <vector>

using namespace std;



void printLevelWise(TreeNode<int>* root) {
    // Write your code here
    if(root==NULL || root==0)
        return;
    
    //cout<<root->data<<":";
    
    queue<TreeNode<int>*> pendingNodes;
    pendingNodes.push(root);
    
    
    while(pendingNodes.size()!=0)
    {
        TreeNode<int>*front=pendingNodes.front();
        
        pendingNodes.pop();
        
        string tobePrinted= to_string(front->data)+':';
        
        for(int i=0;i<front->children.size();i++)
        {
            if(i==front->children.size()-1)
            {
                tobePrinted+=to_string(front->children[i]->data);
            }
            else
            tobePrinted+=to_string(front->children[i]->data)+',';
          
            pendingNodes.push(front->children[i]);
            
        }
        cout<<tobePrinted<<endl;
        
        
     }   
        
    }
    
    
    
    
    
    
    
    template <typename T>
class TreeNode {
   public:
    T data;
    vector<TreeNode<T>*> children;

    TreeNode(T data) { this->data = data; }

    ~TreeNode() {
        for (int i = 0; i < children.size(); i++) {
            delete children[i];
        }
    }
};

TreeNode<int>* takeInputLevelWise() {
    int rootData;
    cin >> rootData;
    TreeNode<int>* root = new TreeNode<int>(rootData);

    queue<TreeNode<int>*> pendingNodes;

    pendingNodes.push(root);
    while (pendingNodes.size() != 0) {
        TreeNode<int>* front = pendingNodes.front();
        pendingNodes.pop();
        int numChild;
        cin >> numChild;
        for (int i = 0; i < numChild; i++) {
            int childData;
            cin >> childData;
            TreeNode<int>* child = new TreeNode<int>(childData);
            front->children.push_back(child);
            pendingNodes.push(child);
        }
    }

    return root;
}

int main() {
    TreeNode<int>* root = takeInputLevelWise();
    printLevelWise(root);
}
    
    
    
